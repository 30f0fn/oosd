<project name="mw-hw" default="hw" basedir=".">

  <property name="courseID" value="681"/>
  <property name="coursePath" value="edu/umb/cs${courseID}"/>

  <!-- only for hw680's bad design -->
  <!-- <include file="${courseID}.xml"/> -->

  <target name="clean">
    <delete dir="bin"/>
    <delete dir="test/bin"/>
  </target>

  <property environment="env"/>
  <!-- suzuki, to read environment variables -->

  <path id="classpath">
    <pathelement path="bin"/>
    <pathelement path="test/bin"/>
    <pathelement path="${env.JUNIT}"/>
    <!-- do above if each jar is in JUNIT env var
         could instead use fileset and put jar directory in the JUNIT env var  -->
  </path>


  <target name="set.hwPath">
    <property name="hwPath" value="${coursePath}/hw${hwID}"/>
  </target>

  <target name="set.hwMainClass">
    <property name="hwMainClass" value="edu.umb.cs${courseID}.hw${hwID}.Main"/>
  </target>

  
  <target name="compile">
    <mkdir dir="bin"/>
    <mkdir dir="test/bin"/>
    <javac srcdir="src" destdir="bin"
           includeantruntime="false"/>
    <javac srcdir="test/src" destdir="test/bin"
           classpathref="classpath"
           includeantruntime="false"/>
    <!-- <javac srcdir="src/${coursePath}" destdir="bin" -->
           <!-- includeantruntime="false"/> -->
    <!-- <javac srcdir="test/src/${coursePath}" destdir="test/bin" -->
           <!-- classpathref="classpath" -->
           <!-- includeantruntime="false"/> -->
  </target>

  <!-- <target name="compile-single" -->
  <!--         depends="set.hwPath, set.hwMainClass"> -->
  <!--   <property name="src.dir" value="src/${hwPath}"/> -->
  <!--   <property name="test.src.dir" value="test/src/${hwPath}"/> -->
  <!--   <property name="bin.dir" value="bin"/> -->
  <!--   <property name="test.bin.dir" value="test/bin"/> -->
  <!--   <!-\- <property name="bin.dir" value="bin/${hw.path}"/> -\-> -->
  <!--   <!-\- <property name="test.bin.dir" value="test/bin/${hw.path}"/> -\-> -->
  <!--   <mkdir dir="${bin.dir}"/> -->
  <!--   <mkdir dir="${test.bin.dir}"/> -->
  <!--   <javac srcdir="${src.dir}" destdir="${bin.dir}" -->
  <!--          includeantruntime="false"/> -->
  <!--   <javac srcdir="${test.src.dir}" destdir="${test.bin.dir}" -->
  <!--          classpathref="classpath" -->
  <!--          includeantruntime="false"/> -->
  <!-- </target> -->


  <target name="compile-single"
          depends="set.hwPath, set.hwMainClass">
    <property name="src.dir" value="src"/>
    <property name="test.src.dir" value="test/src"/>
    <property name="bin.dir" value="bin"/>
    <property name="test.bin.dir" value="test/bin"/>
    <!-- <property name="bin.dir" value="bin/${hw.path}"/> -->
    <!-- <property name="test.bin.dir" value="test/bin/${hw.path}"/> -->
    <mkdir dir="${bin.dir}"/>
    <mkdir dir="${test.bin.dir}"/>
    <javac srcdir="${src.dir}" destdir="${bin.dir}"
           includeantruntime="false"/>
    <javac srcdir="${test.src.dir}" destdir="${test.bin.dir}"
           classpathref="classpath"
           includeantruntime="false"/>
  </target>

  

  <!-- https://junit.org/junit5/docs/snapshot/user-guide/#running-tests-build-ant -->
  <target name="test">
    <mkdir dir="test/bin/report"/>
    <junitlauncher haltOnFailure="true" printSummary="true">
      <classpath refid="classpath"/>
      <testclasses outputdir="test/bin/report">
        <fileset dir="test/bin">
          <!-- given by destdir in compile -->
          <include name="src/${hwPath}/${hw}*Test.class"/>
          <!-- double asterisk is recursive version of * wildcard -->
        </fileset>
        <listener type="legacy-plain" sendSysOut="true" />
      </testclasses>
    </junitlauncher>
  </target>

  <target name="test-single">
    <mkdir dir="test/bin/report"/>
    <junitlauncher haltOnFailure="true" printSummary="true">
      <classpath refid="classpath"/>
      <testclasses outputdir="test/bin/report">
        <fileset dir="test/bin">
          <!-- given by destdir in compile -->
          
          <include name="test/src/${hwPath}/*Test.class"/>
          <!-- double asterisk is recursive version of * wildcard -->
        </fileset>
        <listener type="legacy-plain" sendSysOut="true" />
      </testclasses>
    </junitlauncher>
  </target>


  <target name="jar-single">
    <mkdir dir="bin/jar"/>
    <jar destfile="bin/jar/mw-hw.jar" basedir="bin">
      <manifest>
        <attribute name="Main-Class" value="${hwMainClass}"/>
      </manifest>
    </jar>
  </target>


  <target name="jar">
    <mkdir dir="bin/jar"/>
    <jar destfile="bin/jar/mw-hw.jar" basedir="bin">
      <manifest>
        <attribute name="Main-Class" value="edu.umb.cs${courseID}.hw00.HomeworkRunner"/>
      </manifest>
    </jar>
  </target>

  <target name="run">
    <java jar="bin/jar/mw-hw.jar" fork="true"/>
  </target>

  <target name="hw"
          depends="clean, compile, test, jar, run">
  </target>


  <target name="single"
          depends="clean, compile-single, test-single, jar-single, run">
  </target>

  <target name="setup-hw"
          depends="set.hwPath">
    <mkdir dir="src/${hwPath}"/>
    <mkdir dir="test/src/${hwPath}"/>
  </target>

</project>

