<project name="mw-hw" default="hw" basedir=".">

  <!-- to run all how, just do "ant" without argument -->
  <!-- to run just hw number X, do "ant single -Dhw.id=<X>" -->
  <!-- to configure this file for new hw X, specify its main class with a property as below -->
  <!-- to create directories for HW X, do "ant setup-hw -Dhw.id=<X>" -->

  <condition property="hw.main.class" value="edu.umb.cs680.hw01.Calculator">
    <equals arg1="${hw.id}" arg2="01" />
  </condition>

  <condition property="hw.main.class" value="edu.umb.cs680.hw02.Student">
    <equals arg1="${hw.id}" arg2="02" />
  </condition>

  <condition property="hw.main.class" value="edu.umb.cs680.hw03.Singleton">
    <equals arg1="${hw.id}" arg2="03" />
  </condition>

  <condition property="hw.main.class" value="edu.umb.cs680.hw04.Car">
    <equals arg1="${hw.id}" arg2="04" />
  </condition>

  <condition property="hw.main.class" value="edu.umb.cs680.hw05.FileSystem">
    <equals arg1="${hw.id}" arg2="05" />
  </condition>

  <condition property="hw.main.class" value="edu.umb.cs680.hw06.FileSystem">
    <equals arg1="${hw.id}" arg2="06" />
  </condition>

  <condition property="hw.main.class" value="edu.umb.cs680.hw07.FileSystem">
    <equals arg1="${hw.id}" arg2="07" />
  </condition>

  <condition property="hw.main.class" value="edu.umb.cs680.hw08.APFS">
    <equals arg1="${hw.id}" arg2="08" />
  </condition>

  <condition property="hw.main.class" value="edu.umb.cs680.hw09.CarViewer">
    <equals arg1="${hw.id}" arg2="09" />
  </condition>

  <condition property="hw.main.class" value="edu.umb.cs680.hw09.StockQuoteObservable">
    <equals arg1="${hw.id}" arg2="10" />
  </condition>

  <condition property="hw.main.class" value="edu.umb.cs680.hw09.Glass">
    <equals arg1="${hw.id}" arg2="11" />
  </condition>

  <condition property="hw.main.class" value="edu.umb.cs680.hw12.APFS">
    <equals arg1="${hw.id}" arg2="12" />
  </condition>

  <condition property="hw.main.class" value="edu.umb.cs680.hw12.APFS">
    <equals arg1="${hw.id}" arg2="13" />
  </condition>

  <condition property="hw.main.class" value="edu.umb.cs680.hw12.APFS">
    <equals arg1="${hw.id}" arg2="14" />
  </condition>

  <condition property="hw.main.class" value="edu.umb.cs680.hw15.APFS">
    <equals arg1="${hw.id}" arg2="15" />
  </condition>





  <target name="set.hw.path">
    <property name="hw.path" value="edu/umb/cs680/hw${hw.id}"/>
  </target>

  <target name="clean">
    <delete dir="bin"/>
    <delete dir="test/bin"/>
  </target>

  <property environment="env"/>
  <!-- suzuki, to read environment variables -->

  <path id="classpath">
    <pathelement path="bin"/>
    <pathelement path="test/bin"/>
    <pathelement path="${env.JUNIT}"/>
    <!-- do above if each jar is in JUNIT env var
         could instead use fileset and put jar directory in the JUNIT env var  -->
  </path>


<!-- todo! include junit jar files as fileset -->

  <target name="compile">
    <mkdir dir="bin"/>
    <mkdir dir="test/bin"/>
    <javac srcdir="src" destdir="bin"
           includeantruntime="false"/>
    <javac srcdir="test/src" destdir="test/bin"
           classpathref="classpath"
           includeantruntime="false"/>
  </target>


  <target name="compile.single.hw"
    depends="set.hw.path">
    <property name="src.dir" value="src/${hw.path}"/>
    <property name="test.src.dir" value="test/src/${hw.path}"/>
    <property name="bin.dir" value="bin"/>
    <property name="test.bin.dir" value="test/bin"/>
    <!-- <property name="bin.dir" value="bin/${hw.path}"/> -->
    <!-- <property name="test.bin.dir" value="test/bin/${hw.path}"/> -->
    <mkdir dir="${bin.dir}"/>
    <mkdir dir="${test.bin.dir}"/>
    <javac srcdir="${src.dir}" destdir="${bin.dir}"
           includeantruntime="false"/>
    <javac srcdir="${test.src.dir}" destdir="${test.bin.dir}"
           classpathref="classpath"
           includeantruntime="false"/>
  </target>

  

  <!-- https://junit.org/junit5/docs/snapshot/user-guide/#running-tests-build-ant -->
  <target name="test">
    <mkdir dir="test/bin/report"/>
    <junitlauncher haltOnFailure="true" printSummary="true">
      <classpath refid="classpath"/>
      <testclasses outputdir="test/bin/report">
        <fileset dir="test/bin">
          <!-- given by destdir in compile -->
          <include name="**/*Test.class"/>
          <!-- double asterisk is recursive version of * wildcard -->
        </fileset>
        <listener type="legacy-plain" sendSysOut="true" />
      </testclasses>
    </junitlauncher>
  </target>

  <target name="jar.single.hw">
    <mkdir dir="bin/jar"/>
    <jar destfile="bin/jar/mw-hw.jar" basedir="bin">
      <manifest>
        <attribute name="Main-Class" value="${hw.main.class}"/>
      </manifest>
    </jar>
  </target>


  <target name="jar">
    <mkdir dir="bin/jar"/>
    <jar destfile="bin/jar/mw-hw.jar" basedir="bin">
      <manifest>
        <attribute name="Main-Class" value="edu.umb.cs680.hw00.HomeworkRunner"/>
      </manifest>
    </jar>
  </target>

  <target name="run">
    <java jar="bin/jar/mw-hw.jar" fork="true"/>
  </target>

  <target name="hw"
          depends="clean, compile, test, jar, run">
  </target>


  <target name="single"
          depends="clean, compile.single.hw, test, jar.single.hw, run">
  </target>

  <target name="setup-hw"
          depends="set.hw.path">
    <mkdir dir="src/${hw.path}"/>
    <mkdir dir="test/src/${hw.path}"/>
  </target>

</project>

